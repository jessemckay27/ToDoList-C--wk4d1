1) Setup initial files
2) Setup database: todo
    1> CREATE DATABASE todo;
    2> GO
    1> USE todo;
    2> GO
    Create a new table: tasks  (will be updating it, you could create it including category_id right here and remove ALTER command)
      1> CREATE TABLE tasks
      2> (
      3>   id INT IDENTITY (1,1),
      4>   description VARCHAR(255)
      5> );
      6> GO
    Create a new table: categories
      1) CREATE TABLE categories (id INT IDENTITY (1,1), name VARCHAR(255));
      2) GO
    Update table tasks to include a category id
      1) ALTER TABLE tasks ADD category_id INT;
      2) GO
3) Backup database with SSMS
4) Restore database with new name: todo_test
5) Add 1st test to TaskTest.cs
    Test if database is empty
6) Add Task class in Task.cs
    Add placeholders for _id and _description
    Add constructor for Task object
    Add getters for _id and _description
    Add setter for _description
    add GetAll() method
        1) setup empty list<task>
        2) setup SqlConnection object: conn
        3) open() connection
        3) setup SqlCommand object to get all data from table: task;
        4) setup SqlDataReader to execute SqlCommand
        5) setup loop for rdr to GetAll() info from database
        6) setup 2 placeholders to hold data
        7) use data to construct object8
        8) pass that object to empty list<task>
        9) process repeats while until loop finishes in database
        10) close SqlDataReader when loop is finished
        11) close SqlConnection when loop is finished
        12) return the newly finished list<task>
7) pass first test, debug until working
8) Setup 2nd test to TaskTest.cs
    Test if two objects with same name are Equal
    (tests the override method)
9) Add Equals method override;
10) pass 2nd test, debug until working
11) add Save() method to Task.cs
    1) make new SqlConnection object
    2) open connection
    3) make new SqlCommand object, pass in sql command to insert data into column, and connection
    4) make new SqlParameter object
    5) sets ParameterName to the "do the dishes"
        example:  sets ParameterName = "@TaskDescription"
    6) sets Value to object.GetDescription()
    7) Adds() parameters to SqlCommand object
    8) executes sql command
12) Add DeleteAll method
    1) new sql connection object
    2) open connection
    3) new sqlCommand(2 argumenents), pass SQL command and connection
    4) call executenonQuery method on SqlCommand object.  (ExecuteNonQuery used for UPDATE, INSERT, or DELETE)
    5) close connection
13) Add Test for Save to Database
14) update Equals to overide Id (before only overide description)
15) Add test for Finding in database
    1) create new task object, pass in "mow the lawn"
    2) call .Save(); on object
    3) create new task object using Task.Find() method, pass in original object.GetId() as argument
    4) check if two objects are equal
16) Add find method
    1) create new connection object
    2) open connection
    3) create new sql command object
    4) create new parameter object
    5) set parameter object name as the name in the Sql command
    6) set the value of the paramaterName to be the value of the found id, pass as string to query
    7) Adds() parameters to SqlCommand object
    8) set placeholder for found id to 0;
    9) set placeholder for found description to null;
    10) loop through database
    11) set id placeholder to value of column(0)
    12) set description placeholder to value of column(1)
    13) create new Task object with placeholders
    14) if rdr is done executing, close reader
    15) if connection is done executing, close connection
    16) return newly created object
17) Add HomeModule routes;
18) Add Views for all pages
19) Export database:
    1) right click on database>tasks>generate scripts
    2) choose objects: set specific database objects, hit nexxt
    3) select tables box, hit next
    4) summary: advance> find: types of data to script dropdown, select which type you want, hit ok
    5) summary: check options are correct, hit next
20) to import database, open it in SSMS
